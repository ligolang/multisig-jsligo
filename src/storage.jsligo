#import "parameter.jsligo" "Parameter"
#import "../common/errors.mligo" "Errors"
#import "../fa2/fa2.mligo" "FA2"



export namespace Types {
    export type proposal =
    // @layout:comb
    {
        approved_signers: set<address>,
        executed: bool,
        number_of_signer: nat,
        target_fa2: address,
        transfers: FA2.transfer,
        timestamp: timestamp
    };

    export type t =
    // @layout:comb
    {
        proposal_counter: nat,
        proposal_map: big_map<nat, proposal>,
        signers: set<address>,
        threshold: nat,
        metadata: big_map<string, bytes>
    };
};

export namespace Utils {
    // @inline
    const new_storage = (
        [signers, threshold]:
        [set<address>, nat]
    ): Types.t => ({
        proposal_counter: 0 as nat,
        proposal_map: Big_map.empty as big_map<nat, Types.proposal>,
        signers: signers,
        threshold: threshold,
        metadata: (Big_map.empty as big_map<string, bytes>)
    });


    // @inline
    export const create_proposal = (params: Parameter.Types.proposal_params): Types.proposal => {
        /* @no_mutation */  let number_of_signer = 1 as nat;   
        return {
            approved_signers: Set.literal(list([(Tezos.get_sender ())])),
            executed: false,
            number_of_signer,
            target_fa2: params.target_fa2,
            timestamp: (Tezos.get_now ()),
            transfers: params.transfers
        }
    };

    // @inline
    export const register_proposal = (proposal: Types.proposal, storage: Types.t): Types.t => {
        /* @no_mutation */ const proposal_counter = storage.proposal_counter + (1 as nat);
        const proposal_map = Big_map.add(proposal_counter,
            proposal,
            storage.proposal_map
        );
        return {
            ...storage,
            proposal_map: proposal_map,
            proposal_counter: proposal_counter
        };
    };

    // @inline
    export const retrieve_proposal = (proposal_number: nat, storage: Types.t): Types.proposal =>
        match(Big_map.find_opt(proposal_number, storage.proposal_map)) {
            when (None()) : failwith(Errors.no_proposal_exist);
            when(Some(proposal)) : proposal
        };

    // @inline
    export const add_signer_to_proposal = (proposal: Types.proposal, signer: address, threshold: nat): Types.proposal => {
        const approved_signers: set<address> = Set.add(signer, proposal.approved_signers);
        const executed: bool = Set.cardinal(approved_signers) >= threshold || proposal.executed;
        /* @no_mutation */ const number_of_signer = proposal.number_of_signer + (1 as nat);
        return {
            ...proposal,
            approved_signers: approved_signers,
            number_of_signer,
            executed: executed
        };
    };

    // @inline
    export const update_proposal = (proposal_number: Parameter.Types.proposal_number, proposal: Types.proposal, storage: Types.t): Types.t => {
        const proposal_map = Big_map.update(proposal_number, Some(proposal), storage.proposal_map);
            return {
                ...storage,
                proposal_map: proposal_map
            }
        };
}
